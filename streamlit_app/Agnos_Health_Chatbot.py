#!/usr/bin/env python3
"""
Streamlit App for Agnos Health Chatbot with Enhanced References
Main page - Chatbot Interface
"""

import streamlit as st
import os
import sys
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Add parent directory to path to import from src
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import the RAG system
try:
    from src.rag_system import initialize_simple_rag_system
except ImportError as e:
    st.error(f"Error importing RAG system: {e}")
    st.stop()

# Page config - Main page name
st.set_page_config(
    page_title="Agnos Health Chatbot",
    page_icon="ü©∫",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state
if 'rag_system' not in st.session_state:
    st.session_state.rag_system = None
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'initialized' not in st.session_state:
    st.session_state.initialized = False

def initialize_system():
    """Initialize the RAG system"""
    api_key = os.getenv('OPENAI_API_KEY')
    data_path = os.getenv('DATA_PATH', '../data/forum_data.jsonl')
    
    if not api_key:
        st.error("‚ùå OpenAI API key not found. Please set OPENAI_API_KEY in your .env file")
        return False
    
    try:
        with st.spinner('üîÑ Initializing Agnos Health RAG System...'):
            rag_system = initialize_simple_rag_system(
                data_path=data_path,
                openai_api_key=api_key,
                force_recreate=False
            )
            st.session_state.rag_system = rag_system
            st.session_state.initialized = True
            return True
    except Exception as e:
        st.error(f"‚ùå Failed to initialize system: {str(e)}")
        return False

def display_message(message, is_user=False):
    """Display a chat message"""
    if is_user:
        with st.chat_message("user"):
            st.write(message)
    else:
        with st.chat_message("assistant"):
            st.markdown(message)

def get_suggested_questions():
    """Get suggested questions from forum data"""
    import json
    import random
    
    suggested = []
    try:
        # Load forum data to get popular questions
        data_file = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'data', 'forum_data.jsonl')
        with open(data_file, 'r', encoding='utf-8') as f:
            all_questions = []
            for line in f:
                try:
                    data = json.loads(line.strip())
                    # Get questions with doctor responses
                    if data.get('doctor_comments') and len(data['doctor_comments']) > 0:
                        # Extract key symptoms from content
                        content = data.get('content', '')
                        title = data.get('title', '')
                        
                        # Create suggested question based on title/content
                        if '‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤' in title:
                            all_questions.append("‡∏ú‡∏°‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡∏ô‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏´‡∏•‡∏±‡∏ö ‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£")
                        elif '‡∏ô‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏´‡∏•‡∏±‡∏ö' in title or 'Insomnia' in title:
                            all_questions.append("‡∏ô‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏´‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡∏ï‡∏∑‡πà‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏î‡∏∂‡∏Å‡∏ö‡πà‡∏≠‡∏¢ ‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£")
                        elif '‡∏ß‡∏¥‡∏ï‡∏Å‡∏Å‡∏±‡∏á‡∏ß‡∏•' in title or '‡∏Å‡∏±‡∏á‡∏ß‡∏•' in content:
                            all_questions.append("‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡∏¥‡∏ï‡∏Å‡∏Å‡∏±‡∏á‡∏ß‡∏• ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏£‡∏á ‡∏Ñ‡∏¥‡∏î‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏°‡∏≠‡πÑ‡∏´‡∏°")
                        elif '‡∏õ‡∏ß‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' in title:
                            all_questions.append("‡∏õ‡∏ß‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏Å ‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ö‡∏£‡∏£‡πÄ‡∏ó‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£")
                        elif '‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞' in title or '‡∏Å‡∏£‡∏∞‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞' in title:
                            all_questions.append("‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ö‡πà‡∏≠‡∏¢ ‡πÅ‡∏™‡∏ö‡∏Ç‡∏±‡∏î ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á")
                        elif '‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤' in title:
                            all_questions.append("‡∏°‡∏µ‡∏ï‡∏Å‡∏Ç‡∏≤‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏±‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏£‡πâ‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
                        elif '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå' in title:
                            all_questions.append("‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏≤ ‡∏Å‡∏±‡∏á‡∏ß‡∏•‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà")
                        elif '‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß' in title or '‡πÑ‡∏°‡πÄ‡∏Å‡∏£‡∏ô' in title:
                            all_questions.append("‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏™‡πâ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πÄ‡∏Å‡∏£‡∏ô‡πÑ‡∏´‡∏°")
                except:
                    continue
            
            # Get unique questions
            all_questions = list(set(all_questions))
            
            # If we have questions, randomly select 5
            if all_questions:
                suggested = random.sample(all_questions, min(5, len(all_questions)))
            else:
                # Default suggestions if no data
                suggested = [
                    "‡∏ú‡∏°‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏´‡∏•‡∏±‡∏ö ‡∏ï‡∏∑‡πà‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏î‡∏∂‡∏Å‡∏ö‡πà‡∏≠‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£",
                    "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î ‡∏ß‡∏¥‡∏ï‡∏Å‡∏Å‡∏±‡∏á‡∏ß‡∏• ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏£‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
                    "‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß‡∏ö‡πà‡∏≠‡∏¢‡πÜ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πÄ‡∏Å‡∏£‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°",
                    "‡∏õ‡∏ß‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏Å ‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ö‡∏£‡∏£‡πÄ‡∏ó‡∏≤‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£",
                    "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡πÄ‡∏ö‡∏∑‡πà‡∏≠ ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÑ‡∏´‡∏°"
                ]
    except:
        # Fallback suggestions
        suggested = [
            "‡∏ú‡∏°‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏´‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£",
            "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ï‡∏Å‡∏Å‡∏±‡∏á‡∏ß‡∏• ‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£",
            "‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß‡∏ö‡πà‡∏≠‡∏¢‡πÜ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πÄ‡∏Å‡∏£‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°",
            "‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á",
            "‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏Å ‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ö‡∏£‡∏£‡πÄ‡∏ó‡∏≤‡πÑ‡∏´‡∏°"
        ]
    
    return suggested

def main():
    """Main Streamlit app"""
    
    # Header
    st.title("ü©∫ Agnos Health Chatbot")
    st.markdown("### AI-Powered Health Consultation with Forum References")
    
    # Sidebar
    with st.sidebar:
        st.header("Information")
        st.markdown("""
        **Features:**
        - üîç Symptom-based disease prediction
        - üìö Forum reference matching
        - üë®‚Äç‚öïÔ∏è Doctor expertise integration
        - üîó Actual forum URLs
        - üáπüá≠ Thai language support
        """)
        
        st.markdown("---")
        
        if st.button("üîÑ Reset Chat"):
            st.session_state.chat_history = []
            if st.session_state.rag_system:
                st.session_state.rag_system.clear_memory()
            st.rerun()
        
        if st.button("‚öôÔ∏è Reinitialize System"):
            st.session_state.initialized = False
            st.session_state.rag_system = None
            st.rerun()
    
    # Initialize system if needed
    if not st.session_state.initialized:
        if not initialize_system():
            return
        st.success("‚úÖ System initialized successfully!")
    
    # Display chat history
    for message in st.session_state.chat_history:
        display_message(message['content'], message['is_user'])
    
    # Show suggested questions if no chat history
    if len(st.session_state.chat_history) == 0:
        st.markdown("üí° ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
        
        suggested_questions = get_suggested_questions()
        
        # Create columns for better layout
        cols = st.columns(2)
        for i, question in enumerate(suggested_questions):
            col_idx = i % 2
            with cols[col_idx]:
                if st.button(f"üí¨ {question}", key=f"suggest_{i}", use_container_width=True):
                    st.session_state.suggested_question = question
                    st.rerun()
    
    # Check if a suggested question was clicked
    if 'suggested_question' in st.session_state:
        prompt = st.session_state.suggested_question
        del st.session_state.suggested_question
    else:
        prompt = st.chat_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û...")
    
    # Process the prompt
    if prompt:
        # Add user message to history
        st.session_state.chat_history.append({
            'content': prompt,
            'is_user': True
        })
        display_message(prompt, is_user=True)
        
        # Get AI response
        with st.chat_message("assistant"):
            with st.spinner("ü§î ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                try:
                    response = st.session_state.rag_system.query(prompt)
                    
                    if response['success']:
                        # Display the response
                        st.markdown(response['answer'])
                        
                        # Show additional information in expandable sections
                        if response.get('disease_predictions'):
                            with st.expander(f"üè• Disease Predictions ({len(response['disease_predictions'])})"):
                                for i, disease in enumerate(response['disease_predictions'], 1):
                                    st.write(f"**{i}. {disease['disease_name']}**")
                                    st.write(f"üìã From case: {disease['forum_title']}")
                                    if disease.get('forum_url'):
                                        st.write(f"üîó [View Forum Discussion]({disease['forum_url']})")
                                    st.write("---")
                        
                        if response.get('doctor_history'):
                            with st.expander(f"üë®‚Äç‚öïÔ∏è Expert Insights ({len(response['doctor_history'])})"):
                                for i, history in enumerate(response['doctor_history'], 1):
                                    st.write(f"**{i}. {history.get('doctor_name', '‡πÅ‡∏û‡∏ó‡∏¢‡πå')}**")
                                    st.write(f"üí¨ {history['response'][:200]}...")
                                    st.write(f"üìã From case: {history['forum_title']}")
                                    if history.get('forum_url'):
                                        st.write(f"üîó [View Forum Discussion]({history['forum_url']})")
                                    if history.get('likes', 0) > 0:
                                        st.write(f"üëç {history['likes']} likes")
                                    st.write("---")
                        
                        if response.get('sources'):
                            with st.expander(f"üìö Forum Sources ({len(response['sources'])})"):
                                for i, source in enumerate(response['sources'], 1):
                                    st.write(f"**{i}. {source['title']}**")
                                    if source.get('url'):
                                        st.write(f"üîó [View Discussion]({source['url']})")
                                    st.write(f"üìÖ Date: {source.get('date', 'N/A')}")
                                    st.write(f"üìÅ Type: {source.get('content_type', 'question')}")
                                    st.write("---")
                        
                        # Add to chat history
                        st.session_state.chat_history.append({
                            'content': response['answer'],
                            'is_user': False
                        })
                        
                    else:
                        error_msg = f"‚ùå Error: {response.get('error', 'Unknown error')}"
                        st.error(error_msg)
                        st.session_state.chat_history.append({
                            'content': error_msg,
                            'is_user': False
                        })
                        
                except Exception as e:
                    error_msg = f"‚ùå An error occurred: {str(e)}"
                    st.error(error_msg)
                    st.session_state.chat_history.append({
                        'content': error_msg,
                        'is_user': False
                    })

    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center'>
    <small>ü©∫ Agnos Health Chatbot | Powered by OpenAI GPT-4 | Enhanced with Forum References</small>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()